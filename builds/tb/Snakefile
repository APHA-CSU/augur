rule data:
    input:
        seq = "data/lee_2015.vcf.gz",
        meta = "data/meta.tsv",
        exclude = "data/dropped_strains.txt",
        mask = "data/Locus_to_exclude_Mtb.bed",
        ref = "data/ref.fasta",
        drms = "data/DRMs.txt",
        sites = "data/drm_sites.txt",
        generef = "data/Mtb_H37Rv_NCBI_Annot.gff",
        genes = "data/genes.txt",
        colors = "data/color.tsv",
        config = "data/config.json"
    params:
        method = 'iqtree',
        traits = 'location cluster',
        min_len = 200000

rule filter:
	input:
		seq = rules.data.input.seq,
		meta = rules.data.input.meta,
		exclude = rules.data.input.exclude
	output:
		"results/filtered.vcf.gz"
	params:
		vpc = 10,
		cat = "year month",
		min_len = rules.data.params.min_len
	shell:
		"augur filter --sequences {input.seq} --output {output} --metadata {input.meta} --exclude {input.exclude}"

rule mask:
    input:
        seq = rules.filter.output,
        mask = rules.data.input.mask
    output:
       "results/masked.vcf.gz"
    shell:
        "augur mask --sequences {input.seq} --output {output} --mask {input.mask}"

rule tree:
    input:
        aln = rules.mask.output,
        ref = rules.data.input.ref,
        sites = rules.data.input.sites
    output:
        "results/tree_raw.nwk"
    params:
        method = rules.data.params.method
    shell:
        'augur tree --keep_vcf_fasta --strip_sites {input.sites} --alignment {input.aln} --vcf_reference {input.ref} --output {output} --method {params.method}'

rule timetree:
	input:
		aln = rules.mask.output,
        ref = rules.data.input.ref,
		metadata = rules.data.input.meta,
		tree = rules.tree.output
	output:
		tree = "results/tree.nwk",
		node_data = "results/node_data.json",
		vcf = "results/treetime.vcf"
	params:
		root = 'residual'
	shell:
		'augur treetime --alignment {input.aln} --tree {input.tree} --metadata {input.metadata}'
		' --output {output.tree} --node_data {output.node_data} --vcf_reference {input.ref}'
		' --timetree --root {params.root} --output_vcf {output.vcf} --coalescent opt ' 

rule translate:
	input:
		tree = rules.timetree.output.tree,
		ref = rules.data.input.ref,
		gene_ref = rules.data.input.generef,
		vcf = rules.timetree.output.vcf,
		genes = rules.data.input.genes
	output:
		aa_data = "results/aa_muts.json",
		vcf_out = "results/translations.vcf"
	shell:
		'augur translate --tree {input.tree} --genes {input.genes} --vcf_reference {input.ref}'
		' --vcf_input {input.vcf} --output {output.aa_data} --reference_sequence {input.gene_ref}'
		' --vcf_output {output.vcf_out}'

rule traits:
	input:
		tree = rules.timetree.output.tree,
		meta = rules.data.input.meta
	output:
		"results/traits.json"
	params:
		traits = rules.data.params.traits
	shell:
		'augur traits --tree {input.tree} --metadata {input.meta}'
		' --columns {params.traits} --output {output}'

rule export:
	input:
		tree = rules.timetree.output.tree,
		node_data = rules.timetree.output.node_data,
		metadata = rules.data.input.meta,
		traits = rules.traits.output,
		aa_muts = rules.translate.output.aa_data,
		color_defs = rules.data.input.colors,
		config = rules.data.input.config,
		geo_info = "../../../fauna/source-data/geo_lat_long.tsv"
	output:
		tree = "auspice/tb_tree.json",
		meta = "auspice/tb_meta.json",
	shell:
		'augur export --tree {input.tree} --metadata {input.metadata}'
			' --node_data {input.node_data} --traits {input.traits} --aa_muts {input.aa_muts}'
			' --config {input.config} --color_defs {input.color_defs} --output {output.tree}'
			' --geo_info {input.geo_info} --meta_output {output.meta}'
