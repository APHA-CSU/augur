#!/usr/bin/env python
import sys
from augur import align, tree, mugration

if __name__=="__main__":
    import argparse

    parser = argparse.ArgumentParser(description = "Augur: Real-Time Phylogenetic analysis.")
    subparsers = parser.add_subparsers()

    ### ALIGN.PY
    align_parser = subparsers.add_parser('align')
    align_parser.add_argument('--sequences', '-s', required=True, help="sequences in fasta format")
    align_parser.add_argument('--output', help="output file")
    align_parser.add_argument('--nthreads', type=int, default=2,
                        help="number of threads used by mafft")
    align_parser.add_argument('--aligner', default='mafft', choices=["mafft"],
                        help="alignment program to use")
    align_parser.add_argument('--reference_name', type=str, help="strip insertions relative to reference sequence")
    align_parser.add_argument('--reference_sequence', type=str, help="strip insertions relative to reference sequence")
    align_parser.add_argument('--remove_reference', action="store_true", help="keep reference sequence in alignment")
    align_parser.set_defaults(func=align.run)

    ## TREE.PY
    tree_parser = subparsers.add_parser('tree')
    tree_parser.add_argument('--alignment', required=True, help="alignment to build tree from")
    tree_parser.add_argument('--method', default='iqtree', choices=["fasttree", "raxml", "iqtree"], help="tree builder to use")
    tree_parser.add_argument('--output', help='file name to write tree to')
    tree_parser.add_argument('--iqmodel', help='substitution model to use for iq-tree')
    tree_parser.add_argument('--nthreads', type=int, default=2,
                             help="number of threads used by mafft")
    tree_parser.set_defaults(func=tree.run)


    ## MUGRATION.PY
    traits_parser = subparsers.add_parser('traits')
    traits_parser.add_argument('--tree', required=True, help="tree to perform trait reconstruction on")
    traits_parser.add_argument('--metadata', required=True, help="tsv/csv table with meta data")
    traits_parser.add_argument('--columns', required=True, nargs='+',
                        help='meta data field to perform discrete reconstruction on')
    traits_parser.add_argument('--confidence',action="store_true",
                        help='record the distribution of subleading mugration states')
    traits_parser.add_argument('--output', default='traits.json', help='')
    traits_parser.set_defaults(func=mugration.run)

    args = parser.parse_args()
    return_code = args.func(args)

    # if args.command=="prepare":
    #     from augur import prepare
    #     prepare.run(sys.argv[2:])
    # elif args.command=="align":
    #     from augur import align
    #     align.run(sys.argv[2:])
    # elif args.command=="tree":
    #     from augur import tree
    #     tree.run(sys.argv[2:])
    # elif args.command=="translate":
    #     from augur import translate
    #     translate.run(sys.argv[2:])
    # elif args.command=="mugration":
    #     from augur import mugration
    #     mugration.run(sys.argv[2:])
    # elif args.command=="frequency":
    #     from augur import frequency
    #     frequency.run(sys.argv[2:])
    # elif args.command=="titer":
    #     from augur import titer
    #     titer.run(sys.argv[2:])
    # elif args.command=="titer":
    #     from augur import titer
    #     titer.run(sys.argv[2:])
    # elif args.command=="export":
    #     from augur import export
    #     export.run(sys.argv[2:])
    # else:
    #     print("unrecognized command")
    #     exit(1)
